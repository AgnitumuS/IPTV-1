package com.iptv.hn.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iptv.hn.entity.AdsDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADS_DATA_BEAN".
*/
public class AdsDataBeanDao extends AbstractDao<AdsDataBean, Long> {

    public static final String TABLENAME = "ADS_DATA_BEAN";

    /**
     * Properties of entity AdsDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg_id = new Property(1, long.class, "msg_id", false, "MSG_ID");
        public final static Property Show_time = new Property(2, int.class, "show_time", false, "SHOW_TIME");
        public final static Property Model_id = new Property(3, int.class, "model_id", false, "MODEL_ID");
        public final static Property File_type = new Property(4, int.class, "file_type", false, "FILE_TYPE");
        public final static Property File_url = new Property(5, String.class, "file_url", false, "FILE_URL");
        public final static Property File_path = new Property(6, String.class, "file_path", false, "FILE_PATH");
        public final static Property JsonData = new Property(7, String.class, "jsonData", false, "JSON_DATA");
        public final static Property Video_url = new Property(8, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Time_text = new Property(9, String.class, "time_text", false, "TIME_TEXT");
        public final static Property Time_color = new Property(10, String.class, "time_color", false, "TIME_COLOR");
        public final static Property Pay_mod = new Property(11, String.class, "pay_mod", false, "PAY_MOD");
        public final static Property Special_type = new Property(12, int.class, "special_type", false, "SPECIAL_TYPE");
        public final static Property Special_url = new Property(13, String.class, "special_url", false, "SPECIAL_URL");
        public final static Property Down_type = new Property(14, int.class, "down_type", false, "DOWN_TYPE");
        public final static Property Down_url = new Property(15, String.class, "down_url", false, "DOWN_URL");
        public final static Property Priority_level = new Property(16, int.class, "priority_level", false, "PRIORITY_LEVEL");
        public final static Property Float_position = new Property(17, String.class, "float_position", false, "FLOAT_POSITION");
        public final static Property Busi_id = new Property(18, int.class, "busi_id", false, "BUSI_ID");
        public final static Property Exce_starttime = new Property(19, long.class, "exce_starttime", false, "EXCE_STARTTIME");
        public final static Property Exce_endtime = new Property(20, long.class, "exce_endtime", false, "EXCE_ENDTIME");
        public final static Property Position = new Property(21, int.class, "position", false, "POSITION");
        public final static Property Live_swift = new Property(22, int.class, "live_swift", false, "LIVE_SWIFT");
        public final static Property Is_back = new Property(23, int.class, "is_back", false, "IS_BACK");
    }


    public AdsDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AdsDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADS_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_ID\" INTEGER NOT NULL ," + // 1: msg_id
                "\"SHOW_TIME\" INTEGER NOT NULL ," + // 2: show_time
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 3: model_id
                "\"FILE_TYPE\" INTEGER NOT NULL ," + // 4: file_type
                "\"FILE_URL\" TEXT UNIQUE ," + // 5: file_url
                "\"FILE_PATH\" TEXT," + // 6: file_path
                "\"JSON_DATA\" TEXT," + // 7: jsonData
                "\"VIDEO_URL\" TEXT," + // 8: video_url
                "\"TIME_TEXT\" TEXT," + // 9: time_text
                "\"TIME_COLOR\" TEXT," + // 10: time_color
                "\"PAY_MOD\" TEXT," + // 11: pay_mod
                "\"SPECIAL_TYPE\" INTEGER NOT NULL ," + // 12: special_type
                "\"SPECIAL_URL\" TEXT," + // 13: special_url
                "\"DOWN_TYPE\" INTEGER NOT NULL ," + // 14: down_type
                "\"DOWN_URL\" TEXT," + // 15: down_url
                "\"PRIORITY_LEVEL\" INTEGER NOT NULL ," + // 16: priority_level
                "\"FLOAT_POSITION\" TEXT," + // 17: float_position
                "\"BUSI_ID\" INTEGER NOT NULL ," + // 18: busi_id
                "\"EXCE_STARTTIME\" INTEGER NOT NULL ," + // 19: exce_starttime
                "\"EXCE_ENDTIME\" INTEGER NOT NULL ," + // 20: exce_endtime
                "\"POSITION\" INTEGER NOT NULL ," + // 21: position
                "\"LIVE_SWIFT\" INTEGER NOT NULL ," + // 22: live_swift
                "\"IS_BACK\" INTEGER NOT NULL );"); // 23: is_back
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADS_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdsDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsg_id());
        stmt.bindLong(3, entity.getShow_time());
        stmt.bindLong(4, entity.getModel_id());
        stmt.bindLong(5, entity.getFile_type());
 
        String file_url = entity.getFile_url();
        if (file_url != null) {
            stmt.bindString(6, file_url);
        }
 
        String file_path = entity.getFile_path();
        if (file_path != null) {
            stmt.bindString(7, file_path);
        }
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(8, jsonData);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(9, video_url);
        }
 
        String time_text = entity.getTime_text();
        if (time_text != null) {
            stmt.bindString(10, time_text);
        }
 
        String time_color = entity.getTime_color();
        if (time_color != null) {
            stmt.bindString(11, time_color);
        }
 
        String pay_mod = entity.getPay_mod();
        if (pay_mod != null) {
            stmt.bindString(12, pay_mod);
        }
        stmt.bindLong(13, entity.getSpecial_type());
 
        String special_url = entity.getSpecial_url();
        if (special_url != null) {
            stmt.bindString(14, special_url);
        }
        stmt.bindLong(15, entity.getDown_type());
 
        String down_url = entity.getDown_url();
        if (down_url != null) {
            stmt.bindString(16, down_url);
        }
        stmt.bindLong(17, entity.getPriority_level());
 
        String float_position = entity.getFloat_position();
        if (float_position != null) {
            stmt.bindString(18, float_position);
        }
        stmt.bindLong(19, entity.getBusi_id());
        stmt.bindLong(20, entity.getExce_starttime());
        stmt.bindLong(21, entity.getExce_endtime());
        stmt.bindLong(22, entity.getPosition());
        stmt.bindLong(23, entity.getLive_swift());
        stmt.bindLong(24, entity.getIs_back());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdsDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsg_id());
        stmt.bindLong(3, entity.getShow_time());
        stmt.bindLong(4, entity.getModel_id());
        stmt.bindLong(5, entity.getFile_type());
 
        String file_url = entity.getFile_url();
        if (file_url != null) {
            stmt.bindString(6, file_url);
        }
 
        String file_path = entity.getFile_path();
        if (file_path != null) {
            stmt.bindString(7, file_path);
        }
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(8, jsonData);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(9, video_url);
        }
 
        String time_text = entity.getTime_text();
        if (time_text != null) {
            stmt.bindString(10, time_text);
        }
 
        String time_color = entity.getTime_color();
        if (time_color != null) {
            stmt.bindString(11, time_color);
        }
 
        String pay_mod = entity.getPay_mod();
        if (pay_mod != null) {
            stmt.bindString(12, pay_mod);
        }
        stmt.bindLong(13, entity.getSpecial_type());
 
        String special_url = entity.getSpecial_url();
        if (special_url != null) {
            stmt.bindString(14, special_url);
        }
        stmt.bindLong(15, entity.getDown_type());
 
        String down_url = entity.getDown_url();
        if (down_url != null) {
            stmt.bindString(16, down_url);
        }
        stmt.bindLong(17, entity.getPriority_level());
 
        String float_position = entity.getFloat_position();
        if (float_position != null) {
            stmt.bindString(18, float_position);
        }
        stmt.bindLong(19, entity.getBusi_id());
        stmt.bindLong(20, entity.getExce_starttime());
        stmt.bindLong(21, entity.getExce_endtime());
        stmt.bindLong(22, entity.getPosition());
        stmt.bindLong(23, entity.getLive_swift());
        stmt.bindLong(24, entity.getIs_back());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdsDataBean readEntity(Cursor cursor, int offset) {
        AdsDataBean entity = new AdsDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // msg_id
            cursor.getInt(offset + 2), // show_time
            cursor.getInt(offset + 3), // model_id
            cursor.getInt(offset + 4), // file_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // file_url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // file_path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // jsonData
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // video_url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // time_text
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // time_color
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pay_mod
            cursor.getInt(offset + 12), // special_type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // special_url
            cursor.getInt(offset + 14), // down_type
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // down_url
            cursor.getInt(offset + 16), // priority_level
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // float_position
            cursor.getInt(offset + 18), // busi_id
            cursor.getLong(offset + 19), // exce_starttime
            cursor.getLong(offset + 20), // exce_endtime
            cursor.getInt(offset + 21), // position
            cursor.getInt(offset + 22), // live_swift
            cursor.getInt(offset + 23) // is_back
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdsDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg_id(cursor.getLong(offset + 1));
        entity.setShow_time(cursor.getInt(offset + 2));
        entity.setModel_id(cursor.getInt(offset + 3));
        entity.setFile_type(cursor.getInt(offset + 4));
        entity.setFile_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFile_path(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJsonData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideo_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime_text(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTime_color(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPay_mod(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpecial_type(cursor.getInt(offset + 12));
        entity.setSpecial_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDown_type(cursor.getInt(offset + 14));
        entity.setDown_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPriority_level(cursor.getInt(offset + 16));
        entity.setFloat_position(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBusi_id(cursor.getInt(offset + 18));
        entity.setExce_starttime(cursor.getLong(offset + 19));
        entity.setExce_endtime(cursor.getLong(offset + 20));
        entity.setPosition(cursor.getInt(offset + 21));
        entity.setLive_swift(cursor.getInt(offset + 22));
        entity.setIs_back(cursor.getInt(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdsDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdsDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdsDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
